name: Quality Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  code-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Project
        uses: ./.github/actions/setup-project

      - name: üîç TypeScript Configuration Analysis
        run: |
          echo "::group::TypeScript Configuration"
          echo "Frontend strict mode:" $(cat apps/frontend/tsconfig.json | jq '.compilerOptions.strict // "not set"')
          echo "Backend strict mode:" $(cat apps/backend/tsconfig.json | jq '.compilerOptions.strict // "not set"')
          echo "::endgroup::"

      - name: üìä Code Metrics
        run: |
          echo "::group::Code Metrics"
          echo "Frontend TS files:" $(find apps/frontend/src -name "*.ts" -o -name "*.tsx" | wc -l)
          echo "Backend TS files:" $(find apps/backend/src -name "*.ts" | wc -l)
          echo "Frontend LOC:" $(find apps/frontend/src -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1)
          echo "Backend LOC:" $(find apps/backend/src -name "*.ts" | xargs wc -l | tail -1)
          echo "::endgroup::"

      - name: üìù Documentation Coverage
        run: |
          echo "::group::Documentation Coverage"
          echo "Frontend JSDoc comments:" $(grep -r "\/\*\*" apps/frontend/src --include="*.ts" --include="*.tsx" | wc -l)
          echo "Backend JSDoc comments:" $(grep -r "\/\*\*" apps/backend/src --include="*.ts" | wc -l)
          echo "README files:" $(find . -name "README*" -o -name "*.md" | wc -l)
          echo "::endgroup::"

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Project
        uses: ./.github/actions/setup-project

      - name: üì¶ Dependency Metrics
        run: |
          echo "::group::Dependency Analysis"
          echo "Root deps:" $(cat package.json | jq '.dependencies // {} | length') "dev:" $(cat package.json | jq '.devDependencies // {} | length')
          echo "Frontend deps:" $(cat apps/frontend/package.json | jq '.dependencies // {} | length') "dev:" $(cat apps/frontend/package.json | jq '.devDependencies // {} | length')
          echo "Backend deps:" $(cat apps/backend/package.json | jq '.dependencies // {} | length') "dev:" $(cat apps/backend/package.json | jq '.devDependencies // {} | length')
          echo "::endgroup::"

      - name: üìä Bundle Size Analysis
        run: |
          echo "::group::Bundle Size Analysis"
          echo "Building frontend..."
          pnpm run build:frontend
          echo "Building backend..."
          pnpm run build:backend
          echo "Frontend build size:" $(du -sh apps/frontend/dist 2>/dev/null || echo "No dist")
          echo "Backend build size:" $(du -sh apps/backend/dist 2>/dev/null || echo "No dist")
          echo "::endgroup::"

  workspace-health:
    name: Workspace Health
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Project
        uses: ./.github/actions/setup-project

      - name: üîç Workspace Validation
        run: |
          echo "::group::Workspace Health Check"
          echo "pnpm-workspace.yaml:"
          cat pnpm-workspace.yaml
          echo -e "\nWorkspace packages:"
          pnpm list --depth=0
          echo -e "\nPackage.json validation:"
          node -e "console.log('Root:', !!JSON.parse(require('fs').readFileSync('package.json')))"
          node -e "console.log('Frontend:', !!JSON.parse(require('fs').readFileSync('apps/frontend/package.json')))"
          node -e "console.log('Backend:', !!JSON.parse(require('fs').readFileSync('apps/backend/package.json')))"
          echo "::endgroup::"

      - name: üîÑ Git Hooks Simulation
        run: |
          echo "::group::Git Hooks Simulation"
          echo "Simulating pre-commit checks:"
          pnpm run format:check && echo "‚úÖ Format" || echo "‚ùå Format"
          pnpm run lint && echo "‚úÖ Lint" || echo "‚ùå Lint"
          pnpm run check-ts && echo "‚úÖ TypeScript" || echo "‚ùå TypeScript"
          pnpm run build && echo "‚úÖ Build" || echo "‚ùå Build"
          echo "::endgroup::"
