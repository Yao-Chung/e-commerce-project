openapi: 3.0.3
info:
  title: E-commerce API
  description: |
    A comprehensive e-commerce API built with Express.js, TypeScript, and Prisma.
    This API provides authentication, product management, and other e-commerce functionalities.

    ## Features
    - JWT-based authentication
    - Google OAuth integration
    - Product catalog management
    - Admin role-based access control
    - Comprehensive error handling

    ## Authentication
    Most endpoints require authentication via JWT token in the Authorization header:
    ```
    Authorization: Bearer <jwt_token>
    ```
  version: 1.0.0
  contact:
    name: E-commerce API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.yourdomain.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Health & Info Endpoints
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'E-commerce API is running'
                  timestamp:
                    type: string
                    format: date-time

  /api:
    get:
      tags:
        - Info
      summary: API information
      description: Get API version and available endpoints
      security: []
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'E-commerce API v1.0.0'
                  endpoints:
                    type: object
                    properties:
                      health:
                        type: string
                        example: '/health'
                      auth:
                        type: string
                        example: '/api/auth'
                      products:
                        type: string
                        example: '/api/products'

  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User created successfully'
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get the current authenticated user's profile
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile retrieved successfully'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout the current user (invalidate session)
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout successful'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify JWT token
      description: Verify if the current JWT token is valid
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Token is valid'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/health:
    get:
      tags:
        - Authentication
      summary: Auth service health
      description: Check auth service status and configuration
      security: []
      responses:
        '200':
          description: Auth service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'Auth service is running'
                  services:
                    type: object
                    properties:
                      jwtAuth:
                        type: string
                        example: 'enabled'
                      googleOAuth:
                        type: string
                        example: 'enabled'
                      database:
                        type: string
                        example: 'connected'

  # Google OAuth Endpoints
  /api/auth/google:
    get:
      tags:
        - Google OAuth
      summary: Google OAuth login
      description: Initiate Google OAuth login flow
      security: []
      responses:
        '302':
          description: Redirect to Google OAuth
        '503':
          description: Google OAuth not configured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/google/callback:
    get:
      tags:
        - Google OAuth
      summary: Google OAuth callback
      description: Handle Google OAuth callback and return JWT token
      security: []
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: OAuth authorization code from Google
      responses:
        '200':
          description: OAuth login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Google OAuth login successful'
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '302':
          description: Redirect on failure
        '503':
          description: Google OAuth not configured

  # Product Endpoints
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve all products with comprehensive search, filtering, sorting, and pagination. Use the 'search' parameter to search across product names, descriptions, and categories.
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of items per page
        - name: category
          in: query
          schema:
            type: string
          description: Filter by product category
        - name: minPrice
          in: query
          schema:
            type: number
            format: float
          description: Minimum price filter
        - name: maxPrice
          in: query
          schema:
            type: number
            format: float
          description: Maximum price filter
        - name: search
          in: query
          schema:
            type: string
          description: Search across product name, description, and category (case-insensitive)
        - name: inStock
          in: query
          schema:
            type: boolean
          description: Filter by stock availability
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, price, createdAt, stock]
            default: createdAt
          description: Sort field
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Products retrieved successfully'
                  data:
                    $ref: '#/components/schemas/ProductListResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

    post:
      tags:
        - Products
      summary: Create a new product (Admin only)
      description: Create a new product (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product created successfully'
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product retrieved successfully'
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Products
      summary: Update product (Admin only)
      description: Update an existing product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product updated successfully'
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete product (Admin only)
      description: Delete a product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product deleted successfully'
        '400':
          description: Invalid product ID
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Product not found

  /api/products/categories:
    get:
      tags:
        - Products
      summary: Get all categories
      description: Retrieve all product categories
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Categories retrieved successfully'
                  data:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/CategoryResponse'

  /api/products/category/{category}:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Retrieve products filtered by category
      security: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
          description: Product category
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Products retrieved successfully'
                  data:
                    $ref: '#/components/schemas/ProductListResponse'
        '400':
          description: Invalid category

  /api/products/{id}/stock:
    patch:
      tags:
        - Products
      summary: Update product stock (Admin only)
      description: Set the absolute stock quantity of a product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stock:
                  type: integer
                  minimum: 0
                  description: Absolute stock quantity to set
              required:
                - stock
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Stock updated successfully'
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Product not found

  /api/products/with-image:
    post:
      tags:
        - Products
        - Upload
      summary: Create product with image (Admin only)
      description: |
        Create a new product with image upload in a single request (Admin only).

        **Use this endpoint for:**
        - Simple admin forms without image preview
        - Mobile admin applications
        - Bulk product imports
        - Third-party integrations

        **For advanced UX with image previews, use the two-step approach:**
        1. POST /api/upload/single (get image URL)
        2. POST /api/products (create product with imageUrl)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Wireless Bluetooth Headphones'
                description:
                  type: string
                  example: 'High-quality wireless headphones'
                price:
                  type: number
                  example: 199.99
                category:
                  type: string
                  example: 'Electronics'
                stock:
                  type: integer
                  example: 50
                image:
                  type: string
                  format: binary
                  description: Product image file
              required:
                - name
                - description
                - price
                - category
                - stock
      responses:
        '201':
          description: Product created successfully with image
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Validation error or invalid image
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/products/{id}/with-image:
    put:
      tags:
        - Products
        - Upload
      summary: Update product with image (Admin only)
      description: |
        Update an existing product with optional image upload in a single request (Admin only).

        **Use this endpoint for:**
        - Simple admin forms without image preview
        - Mobile admin applications  
        - Quick product updates
        - Third-party integrations

        **For advanced UX with image previews, use the two-step approach:**
        1. POST /api/upload/single (get new image URL)
        2. PUT /api/products/{id} (update product with new imageUrl)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                stock:
                  type: integer
                image:
                  type: string
                  format: binary
                  description: New product image file (optional)
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Validation error or invalid image
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Product not found

  # Upload Endpoints
  /api/upload/single:
    post:
      tags:
        - Upload
      summary: Upload single image
      description: Upload a single image to Cloudinary (authenticated users)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
                uploadType:
                  type: string
                  enum: [product_images, thumbnails, user_avatars]
                  default: product_images
                  description: Type of upload for different transformations
              required:
                - image
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Image uploaded successfully'
                  data:
                    type: object
                    properties:
                      image:
                        $ref: '#/components/schemas/UploadResult'
        '400':
          description: Invalid file or validation error
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/upload/multiple:
    post:
      tags:
        - Upload
      summary: Upload multiple images
      description: Upload multiple images to Cloudinary (authenticated users)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Image files to upload (max 10)
                uploadType:
                  type: string
                  enum: [product_images, thumbnails, user_avatars]
                  default: product_images
              required:
                - images
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        items:
                          $ref: '#/components/schemas/UploadResult'
                      count:
                        type: integer
        '400':
          description: Invalid files or validation error
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/upload/delete:
    delete:
      tags:
        - Upload
      summary: Delete image (Admin only)
      description: Delete an image from Cloudinary by public ID (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                publicId:
                  type: string
                  description: Cloudinary public ID of the image to delete
                  example: 'e-commerce/products/abc123'
              required:
                - publicId
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Image deleted successfully'
                  data:
                    type: object
                    properties:
                      result:
                        type: string
                        example: 'ok'
        '400':
          description: Invalid request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/upload/delete-multiple:
    delete:
      tags:
        - Upload
      summary: Delete multiple images (Admin only)
      description: Delete multiple images from Cloudinary by public IDs (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                publicIds:
                  type: array
                  items:
                    type: string
                  description: Array of Cloudinary public IDs to delete
                  example:
                    ['e-commerce/products/abc123', 'e-commerce/products/def456']
              required:
                - publicIds
      responses:
        '200':
          description: Images deletion attempted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      deleted:
                        type: object
                        description: Deletion results by public ID
        '400':
          description: Invalid request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/upload/details/{publicId}:
    get:
      tags:
        - Upload
      summary: Get image details
      description: Get detailed information about an image from Cloudinary
      parameters:
        - name: publicId
          in: path
          required: true
          schema:
            type: string
          description: Cloudinary public ID of the image
      responses:
        '200':
          description: Image details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Image details retrieved successfully'
                  data:
                    type: object
                    properties:
                      image:
                        type: object
                        description: Cloudinary image details
        '400':
          description: Invalid public ID
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/upload/transform/{publicId}:
    post:
      tags:
        - Upload
      summary: Generate transformation URL
      description: Generate a URL with custom transformations for an existing image
      parameters:
        - name: publicId
          in: path
          required: true
          schema:
            type: string
          description: Cloudinary public ID of the image
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                transformations:
                  type: object
                  description: Cloudinary transformation parameters
                  example: { 'width': 300, 'height': 300, 'crop': 'fill' }
      responses:
        '200':
          description: Transformation URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Transformation URL generated successfully'
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                      publicId:
                        type: string
                      transformations:
                        type: object
        '400':
          description: Invalid public ID
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Profile Management Endpoints
  /api/users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve the current user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile retrieved successfully'
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/users/avatar:
    put:
      tags:
        - Users
      summary: Update user avatar URL
      description: Update the current user's avatar with a URL
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: uri
                  example: 'https://example.com/avatar.jpg'
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Avatar updated successfully'
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/users/avatar/upload:
    post:
      tags:
        - Users
      summary: Upload user avatar
      description: Upload and update the current user's avatar image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Avatar uploaded successfully'
                  data:
                    type: object
                    properties:
                      profile:
                        $ref: '#/components/schemas/UserProfile'
                      upload:
                        $ref: '#/components/schemas/UploadResult'
        '400':
          description: No image file provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/users/account:
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Permanently delete the current user's account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                  example: 'password123'
                confirmPassword:
                  type: string
                  example: 'password123'
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Account deleted successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile/completion:
    get:
      tags:
        - Users
      summary: Get profile completion details
      description: Get detailed information about profile completion status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile completion details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile completion details retrieved successfully'
                  data:
                    $ref: '#/components/schemas/ProfileCompletion'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Address Management Endpoints
  /api/addresses:
    get:
      tags:
        - Addresses
      summary: Get user addresses
      description: Retrieve all addresses for the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Addresses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Addresses retrieved successfully'
                  data:
                    $ref: '#/components/schemas/AddressList'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Addresses
      summary: Create new address
      description: Create a new address for the current user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Address created successfully'
                  data:
                    $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/addresses/{id}:
    get:
      tags:
        - Addresses
      summary: Get address by ID
      description: Retrieve a specific address by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Address ID
      responses:
        '200':
          description: Address retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Address retrieved successfully'
                  data:
                    $ref: '#/components/schemas/Address'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Addresses
      summary: Update address
      description: Update an existing address
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Address updated successfully'
                  data:
                    $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Addresses
      summary: Delete address
      description: Delete an existing address
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Address ID
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Address deleted successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/addresses/{id}/default:
    put:
      tags:
        - Addresses
      summary: Set address as default
      description: Set an address as the default address for the user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Address ID
      responses:
        '200':
          description: Default address updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Default address updated successfully'
                  data:
                    $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Wishlist Management Endpoints
  /api/wishlist:
    get:
      tags:
        - Wishlist
      summary: Get user wishlist
      description: Retrieve the current user's wishlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Wishlist retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Wishlist retrieved successfully'
                  data:
                    $ref: '#/components/schemas/Wishlist'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Wishlist
      summary: Add item to wishlist
      description: Add a product to the current user's wishlist
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
              properties:
                productId:
                  type: string
                  format: uuid
                  example: '123e4567-e89b-12d3-a456-426614174000'
      responses:
        '201':
          description: Item added to wishlist successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item added to wishlist successfully'
                  data:
                    $ref: '#/components/schemas/WishlistItem'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Product already in wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Wishlist
      summary: Clear wishlist
      description: Remove all items from the current user's wishlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Wishlist cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Wishlist cleared successfully'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/wishlist/{productId}:
    delete:
      tags:
        - Wishlist
      summary: Remove item from wishlist
      description: Remove a specific product from the current user's wishlist
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '200':
          description: Item removed from wishlist successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item removed from wishlist successfully'
        '400':
          description: Invalid product ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Product not found in wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/wishlist/{productId}/move-to-cart:
    post:
      tags:
        - Wishlist
      summary: Move item to cart
      description: Move a product from wishlist to shopping cart
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  format: uuid
                  example: '123e4567-e89b-12d3-a456-426614174000'
                quantity:
                  type: integer
                  minimum: 1
                  example: 1
      responses:
        '200':
          description: Item moved to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item moved to cart successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Product not found in wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/wishlist/{productId}/status:
    get:
      tags:
        - Wishlist
      summary: Check wishlist status
      description: Check if a product is in the current user's wishlist
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '200':
          description: Wishlist status checked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Wishlist status checked successfully'
                  data:
                    type: object
                    properties:
                      productId:
                        type: string
                        format: uuid
                      isInWishlist:
                        type: boolean
        '400':
          description: Invalid product ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/wishlist/count:
    get:
      tags:
        - Wishlist
      summary: Get wishlist count
      description: Get the number of items in the current user's wishlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Wishlist count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Wishlist count retrieved successfully'
                  data:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Preferences Endpoints
  /api/preferences:
    get:
      tags:
        - Preferences
      summary: Get user preferences
      description: Retrieve the current user's preferences
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Preferences retrieved successfully'
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Preferences
      summary: Update user preferences
      description: Update the current user's preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesRequest'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Preferences updated successfully'
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/preferences/notifications:
    get:
      tags:
        - Preferences
      summary: Get notification settings
      description: Retrieve the current user's notification settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notification settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Notification settings retrieved successfully'
                  data:
                    $ref: '#/components/schemas/NotificationSettings'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Preferences
      summary: Update notification settings
      description: Update the current user's notification settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Notification settings updated successfully'
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/preferences/display:
    get:
      tags:
        - Preferences
      summary: Get display settings
      description: Retrieve the current user's display settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Display settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Display settings retrieved successfully'
                  data:
                    $ref: '#/components/schemas/DisplaySettings'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Preferences
      summary: Update display settings
      description: Update the current user's display settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisplaySettings'
      responses:
        '200':
          description: Display settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Display settings updated successfully'
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/preferences/reset:
    post:
      tags:
        - Preferences
      summary: Reset preferences to default
      description: Reset the current user's preferences to default values
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Preferences reset to default successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Preferences reset to default successfully'
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Cart Endpoints
  /api/cart:
    get:
      tags:
        - Cart
      summary: Get current cart
      description: Retrieve the current user's cart (authenticated) or guest cart (session-based)
      security: []
      parameters:
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Cart retrieved successfully'
                  data:
                    $ref: '#/components/schemas/CartResponse'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Cart
      summary: Clear entire cart
      description: Remove all items from the cart
      security: []
      parameters:
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Cart cleared successfully'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'All items have been removed from your cart'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/cart/items:
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product to the cart with specified quantity
      security: []
      parameters:
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item added to cart successfully'
                  data:
                    $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/cart/items/{productId}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific item in the cart. Set quantity to 0 to remove the item.
      security: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to update
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Cart item updated successfully'
                  data:
                    $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove a specific item from the cart
      security: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to remove
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Item removed from cart successfully'
                  data:
                    $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/cart/merge:
    post:
      tags:
        - Cart
      summary: Merge guest cart with authenticated user cart
      description: Merge a guest cart with the authenticated user's cart after login
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeCartRequest'
      responses:
        '200':
          description: Guest cart merged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Guest cart merged successfully'
                  data:
                    $ref: '#/components/schemas/CartResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/cart/validate:
    get:
      tags:
        - Cart
      summary: Validate cart contents
      description: Validate cart items for stock availability and product existence
      security: []
      parameters:
        - in: header
          name: x-session-id
          schema:
            type: string
          description: Session ID for guest cart (required for guest users)
      responses:
        '200':
          description: Cart validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Cart validation completed'
                  data:
                    $ref: '#/components/schemas/CartValidationResult'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          example: 'John Doe'
        email:
          type: string
          format: email
          example: 'john@example.com'
        password:
          type: string
          minLength: 6
          example: 'password123'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'john@example.com'
        password:
          type: string
          example: 'password123'

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserPublic'
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'john@example.com'
        name:
          type: string
          example: 'John Doe'
        role:
          type: string
          enum: [USER, ADMIN]
          example: 'USER'
        googleId:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserPublic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Product Schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          example: 'Wireless Bluetooth Headphones'
        description:
          type: string
          example: 'High-quality wireless headphones with noise cancellation'
        price:
          type: number
          format: float
          example: 199.99
        category:
          type: string
          example: 'Electronics'
        imageUrl:
          type: string
          format: uri
          nullable: true
          example: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500'
        stock:
          type: integer
          minimum: 0
          example: 50
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductCreateRequest:
      type: object
      required:
        - name
        - description
        - price
        - category
        - stock
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: 'Wireless Bluetooth Headphones'
        description:
          type: string
          minLength: 1
          example: 'High-quality wireless headphones with noise cancellation'
        price:
          type: number
          format: float
          minimum: 0.01
          example: 199.99
        category:
          type: string
          minLength: 1
          maxLength: 100
          example: 'Electronics'
        imageUrl:
          type: string
          format: uri
          nullable: true
          example: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500'
        stock:
          type: integer
          minimum: 0
          example: 50

    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        price:
          type: number
          format: float
          minimum: 0.01
        category:
          type: string
          minLength: 1
          maxLength: 100
        imageUrl:
          type: string
          format: uri
          nullable: true
        stock:
          type: integer
          minimum: 0

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            total:
              type: integer
              example: 6
            totalPages:
              type: integer
              example: 1

    CategoryResponse:
      type: object
      properties:
        name:
          type: string
          example: 'Electronics'
        count:
          type: integer
          example: 25

    # Error Schemas
    Error:
      type: object
      properties:
        error:
          type: string
          example: 'Bad Request'
        message:
          type: string
          example: 'Invalid input provided'

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: 'Validation failed'
        details:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              expected:
                type: string
              received:
                type: string
              path:
                type: array
                items:
                  type: string
              message:
                type: string

    # User Profile Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'john@example.com'
        name:
          type: string
          example: 'John Doe'
        role:
          type: string
          enum: [USER, ADMIN]
          example: 'USER'
        phone:
          type: string
          nullable: true
          example: '+1234567890'
        avatar:
          type: string
          nullable: true
          example: 'https://example.com/avatar.jpg'
        dateOfBirth:
          type: string
          format: date-time
          nullable: true
          example: '1990-01-01T00:00:00.000Z'
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
          nullable: true
          example: 'MALE'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        profileCompletion:
          type: integer
          minimum: 0
          maximum: 100
          example: 80

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          example: 'John Doe'
        phone:
          type: string
          nullable: true
          example: '+1234567890'
        dateOfBirth:
          type: string
          format: date
          nullable: true
          example: '1990-01-01'
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
          nullable: true
          example: 'MALE'

    ProfileCompletion:
      type: object
      properties:
        totalFields:
          type: integer
          example: 5
        completedFields:
          type: integer
          example: 4
        percentage:
          type: integer
          minimum: 0
          maximum: 100
          example: 80
        missingFields:
          type: array
          items:
            type: string
          example: ['dateOfBirth']

    # Address Schemas
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          example: 'Home Address'
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'New York'
        state:
          type: string
          example: 'NY'
        zipCode:
          type: string
          example: '10001'
        country:
          type: string
          example: 'USA'
        isDefault:
          type: boolean
          example: true
        addressType:
          type: string
          enum: [SHIPPING, BILLING, BOTH]
          example: 'SHIPPING'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AddressList:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        defaultAddress:
          $ref: '#/components/schemas/Address'
          nullable: true
        totalCount:
          type: integer
          example: 3

    CreateAddressRequest:
      type: object
      required:
        - name
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        name:
          type: string
          example: 'Home Address'
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'New York'
        state:
          type: string
          example: 'NY'
        zipCode:
          type: string
          example: '10001'
        country:
          type: string
          example: 'USA'
        isDefault:
          type: boolean
          example: false
        addressType:
          type: string
          enum: [SHIPPING, BILLING, BOTH]
          example: 'SHIPPING'

    UpdateAddressRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Home Address'
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'New York'
        state:
          type: string
          example: 'NY'
        zipCode:
          type: string
          example: '10001'
        country:
          type: string
          example: 'USA'
        isDefault:
          type: boolean
          example: false
        addressType:
          type: string
          enum: [SHIPPING, BILLING, BOTH]
          example: 'SHIPPING'

    # Wishlist Schemas
    Wishlist:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WishlistItem'
        totalCount:
          type: integer
          example: 5
        totalValue:
          type: number
          format: float
          example: 299.99

    WishlistItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        createdAt:
          type: string
          format: date-time
        product:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: '123e4567-e89b-12d3-a456-426614174000'
            name:
              type: string
              example: 'iPhone 15'
            description:
              type: string
              example: 'Latest iPhone model'
            price:
              type: number
              format: float
              example: 999.99
            category:
              type: string
              example: 'Electronics'
            imageUrl:
              type: string
              nullable: true
              example: 'https://example.com/iphone15.jpg'
            stock:
              type: integer
              example: 10

    # User Preferences Schemas
    UserPreferences:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        emailNotifications:
          type: boolean
          example: true
        marketingEmails:
          type: boolean
          example: true
        orderNotifications:
          type: boolean
          example: true
        language:
          type: string
          example: 'en'
        currency:
          type: string
          example: 'USD'
        timezone:
          type: string
          example: 'UTC'
        theme:
          type: string
          enum: [light, dark, auto]
          example: 'light'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdatePreferencesRequest:
      type: object
      properties:
        emailNotifications:
          type: boolean
          example: true
        marketingEmails:
          type: boolean
          example: true
        orderNotifications:
          type: boolean
          example: true
        language:
          type: string
          example: 'en'
        currency:
          type: string
          example: 'USD'
        timezone:
          type: string
          example: 'UTC'
        theme:
          type: string
          enum: [light, dark, auto]
          example: 'light'

    NotificationSettings:
      type: object
      required:
        - emailNotifications
        - marketingEmails
        - orderNotifications
      properties:
        emailNotifications:
          type: boolean
          example: true
        marketingEmails:
          type: boolean
          example: true
        orderNotifications:
          type: boolean
          example: true

    DisplaySettings:
      type: object
      required:
        - language
        - currency
        - timezone
        - theme
      properties:
        language:
          type: string
          example: 'en'
        currency:
          type: string
          example: 'USD'
        timezone:
          type: string
          example: 'UTC'
        theme:
          type: string
          enum: [light, dark, auto]
          example: 'light'

    # Upload Schemas
    UploadResult:
      type: object
      properties:
        public_id:
          type: string
          example: 'e-commerce/products/abc123'
        url:
          type: string
          format: uri
          example: 'http://res.cloudinary.com/demo/image/upload/v1234567890/e-commerce/products/abc123.jpg'
        secure_url:
          type: string
          format: uri
          example: 'https://res.cloudinary.com/demo/image/upload/v1234567890/e-commerce/products/abc123.jpg'
        width:
          type: integer
          example: 800
        height:
          type: integer
          example: 600
        format:
          type: string
          example: 'jpg'
        resource_type:
          type: string
          example: 'image'
        bytes:
          type: integer
          example: 245760

    # Cart Schemas
    CartItemWithProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        userId:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        productId:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        quantity:
          type: integer
          minimum: 1
          example: 2
        createdAt:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'
        product:
          $ref: '#/components/schemas/Product'

    CartSummary:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemWithProduct'
        totalItems:
          type: integer
          minimum: 0
          example: 3
        totalAmount:
          type: number
          format: float
          minimum: 0
          example: 29.99
        subtotal:
          type: number
          format: float
          minimum: 0
          example: 29.99

    CartResponse:
      type: object
      properties:
        cart:
          $ref: '#/components/schemas/CartSummary'
        isGuest:
          type: boolean
          example: false

    AddToCartRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        quantity:
          type: integer
          minimum: 1
          example: 2

    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 0
          example: 3

    MergeCartRequest:
      type: object
      required:
        - guestSessionId
      properties:
        guestSessionId:
          type: string
          minLength: 1
          example: 'guest-session-123'

    CartValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        errors:
          type: array
          items:
            type: string
          example: []
        unavailableItems:
          type: array
          items:
            type: string
          example: []
        stockIssues:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              requestedQuantity:
                type: integer
              availableStock:
                type: integer
          example: []

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Unauthorized'
              message:
                type: string
                example: 'Invalid or missing token'

    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Forbidden'
              message:
                type: string
                example: 'Admin access required'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Health
    description: Health check endpoints
  - name: Info
    description: API information endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Google OAuth
    description: Google OAuth integration
  - name: Products
    description: Product catalog management
  - name: Upload
    description: Image upload and management
  - name: Users
    description: User profile management
  - name: Addresses
    description: Address management
  - name: Wishlist
    description: Wishlist functionality
  - name: Preferences
    description: User preferences and settings
