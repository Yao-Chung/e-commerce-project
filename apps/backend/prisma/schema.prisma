// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?  // Optional for OAuth users
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  googleId String? @unique

  // Relations
  orders    Order[]
  cart      CartItem[]
  addresses Address[]
  sessions  Session[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  category    String
  imageUrl    String?
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(uuid())
  status      OrderStatus @default(PENDING)
  total       Float
  shippingAddress Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float    // Price at time of order
  createdAt DateTime @default(now())

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

model Payment {
  id             String        @id @default(uuid())
  stripeId       String        @unique
  amount         Float
  currency       String        @default("usd")
  status         PaymentStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  @@map("payments")
}

model Address {
  id          String   @id @default(uuid())
  name        String
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("addresses")
}

model Session {
  id        String   @id @default(uuid())
  sessionId String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("sessions")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}
